class MyCalculator {
    // Method to calculate (n)^p
    public long power(int n, int p) throws Exception {
        if (n < 0 || p < 0) {
            throw new Exception("n or p should not be negative");
        } else if (n == 0 && p == 0) {
            throw new Exception("n and p should not be zero");
        } else {
            return (long) Math.pow(n, p);
        }
    }
}

public class CalculatorApp {
    public static void main(String[] args) {
        MyCalculator calculator = new MyCalculator();

        try {
            // Example usage
            int base = 2;
            int exponent = 3;
            long result = calculator.power(base, exponent);
            System.out.println(base + " raised to the power " + exponent + " is: " + result);

            // Testing with negative values
            // Uncomment the next line to see the exception
            // result = calculator.power(-2, 3);
        } catch (Exception e) {
            System.out.println("Exception: " + e.getMessage());
        }
    }
}

// Factory class to create instances of different vehicles based on user input
class VehicleFactory {
    public static Vehicle createVehicle(String type) {
        switch (type.toLowerCase()) {
            case "helicopter":
                return new Helicopter();
            case "car":
                return new Car();
            case "train":
                return new Train();
            default:
                throw new IllegalArgumentException("Invalid vehicle type: " + type);
        }
    }
}

public class VehicleOrderSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Accept user input for the type of vehicle
        System.out.print("Enter the type of vehicle (Helicopter, Car, or Train): ");
        String vehicleType = scanner.nextLine();

        // Create the requested vehicle
        try {
            Vehicle vehicle = VehicleFactory.createVehicle(vehicleType);

            // Move the vehicle
            vehicle.move();
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
        }

        scanner.close();
    }
}
