// Custom exception class for age not within range
class AgeNotWithinRangeException extends Exception {
    AgeNotWithinRangeException(String message) {
        super(message);
    }
}

// Custom exception class for invalid name
class NameNotValidException extends Exception {
    NameNotValidException(String message) {
        super(message);
    }
}

// Student class
class Student {
    int rollNo;
    String name;
    int age;
    String course;

    // Parameterized constructor with exception handling
    Student(int rollNo, String name, int age, String course) throws AgeNotWithinRangeException, NameNotValidException {
        // Check age validity
        if (age < 15 || age > 21) {
            throw new AgeNotWithinRangeException("Age should be between 15 and 21.");
        }

        // Check name validity (no numbers or special symbols allowed)
        if (!name.matches("[a-zA-Z]+")) {
            throw new NameNotValidException("Name should not contain numbers or special symbols.");
        }

        this.rollNo = rollNo;
        this.name = name;
        this.age = age;
        this.course = course;
    }
}

public class StudentTest {
    public static void main(String[] args) {
        try {
            // Creating a valid student
            Student validStudent = new Student(1, "John", 18, "Science");

            // Creating an invalid student with age not within range
            // Uncomment the line below to test the AgeNotWithinRangeException
            // Student invalidAgeStudent = new Student(2, "Alice", 14, "Math");

            // Creating an invalid student with name containing numbers
            // Uncomment the line below to test the NameNotValidException
            // Student invalidNameStudent = new Student(3, "Bob123", 20, "History");

        } catch (AgeNotWithinRangeException e) {
            System.out.println("Exception: " + e.getMessage());
        } catch (NameNotValidException e) {
            System.out.println("Exception: " + e.getMessage());
        }
    }
}
